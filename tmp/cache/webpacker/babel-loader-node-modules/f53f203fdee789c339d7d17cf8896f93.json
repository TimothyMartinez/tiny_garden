{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime-corejs2/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs2/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _assign = _interopRequireDefault(require(\"@babel/runtime-corejs2/core-js/object/assign\"));\n\nvar _stringify = _interopRequireDefault(require(\"@babel/runtime-corejs2/core-js/json/stringify\"));\n\nvar _keys = _interopRequireDefault(require(\"@babel/runtime-corejs2/core-js/object/keys\"));\n\nvar _reactDom = _interopRequireDefault(require(\"react-dom\"));\n\nvar ClientStartup = _interopRequireWildcard(require(\"./clientStartup\"));\n\nvar _handleError2 = _interopRequireDefault(require(\"./handleError\"));\n\nvar _ComponentRegistry = _interopRequireDefault(require(\"./ComponentRegistry\"));\n\nvar _StoreRegistry = _interopRequireDefault(require(\"./StoreRegistry\"));\n\nvar _serverRenderReactComponent2 = _interopRequireDefault(require(\"./serverRenderReactComponent\"));\n\nvar _buildConsoleReplay2 = _interopRequireDefault(require(\"./buildConsoleReplay\"));\n\nvar _createReactElement = _interopRequireDefault(require(\"./createReactElement\"));\n\nvar _Authenticity = _interopRequireDefault(require(\"./Authenticity\"));\n\nvar _context = _interopRequireDefault(require(\"./context\"));\n\nvar ctx = (0, _context[\"default\"])();\nvar DEFAULT_OPTIONS = {\n  traceTurbolinks: false\n};\nctx.ReactOnRails = {\n  /**\n   * Main entry point to using the react-on-rails npm package. This is how Rails will be able to\n   * find you components for rendering.\n   * @param components (key is component name, value is component)\n   */\n  register: function register(components) {\n    _ComponentRegistry[\"default\"].register(components);\n  },\n\n  /**\n   * Allows registration of store generators to be used by multiple react components on one Rails\n   * view. store generators are functions that take one arg, props, and return a store. Note that\n   * the setStore API is different in that it's the actual store hydrated with props.\n   * @param stores (keys are store names, values are the store generators)\n   */\n  registerStore: function registerStore(stores) {\n    if (!stores) {\n      throw new Error('Called ReactOnRails.registerStores with a null or undefined, rather than ' + 'an Object with keys being the store names and the values are the store generators.');\n    }\n\n    _StoreRegistry[\"default\"].register(stores);\n  },\n\n  /**\n   * Allows retrieval of the store by name. This store will be hydrated by any Rails form props.\n   * Pass optional param throwIfMissing = false if you want to use this call to get back null if the\n   * store with name is not registered.\n   * @param name\n   * @param throwIfMissing Defaults to true. Set to false to have this call return undefined if\n   *        there is no store with the given name.\n   * @returns Redux Store, possibly hydrated\n   */\n  getStore: function getStore(name) {\n    var throwIfMissing = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    return _StoreRegistry[\"default\"].getStore(name, throwIfMissing);\n  },\n\n  /**\n   * Set options for ReactOnRails, typically before you call ReactOnRails.register\n   * Available Options:\n   * `traceTurbolinks: true|false Gives you debugging messages on Turbolinks events\n   */\n  setOptions: function setOptions(newOptions) {\n    if ('traceTurbolinks' in newOptions) {\n      this.options.traceTurbolinks = newOptions.traceTurbolinks; // eslint-disable-next-line no-param-reassign\n\n      delete newOptions.traceTurbolinks;\n    }\n\n    if ((0, _keys[\"default\"])(newOptions).length > 0) {\n      throw new Error('Invalid options passed to ReactOnRails.options: ', (0, _stringify[\"default\"])(newOptions));\n    }\n  },\n\n  /**\n   * Allow directly calling the page loaded script in case the default events that trigger react\n   * rendering are not sufficient, such as when loading JavaScript asynchronously with TurboLinks:\n   * More details can be found here:\n   * https://github.com/shakacode/react_on_rails/blob/master/docs/additional-reading/turbolinks.md\n   */\n  reactOnRailsPageLoaded: function reactOnRailsPageLoaded() {\n    ClientStartup.reactOnRailsPageLoaded();\n  },\n\n  /**\n   * Returns CSRF authenticity token inserted by Rails csrf_meta_tags\n   * @returns String or null\n   */\n  authenticityToken: function authenticityToken() {\n    return _Authenticity[\"default\"].authenticityToken();\n  },\n\n  /**\n   * Returns header with csrf authenticity token and XMLHttpRequest\n   * @param {*} other headers\n   * @returns {*} header\n   */\n  authenticityHeaders: function authenticityHeaders() {\n    var otherHeaders = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return _Authenticity[\"default\"].authenticityHeaders(otherHeaders);\n  },\n  // /////////////////////////////////////////////////////////////////////////////\n  // INTERNALLY USED APIs\n  // /////////////////////////////////////////////////////////////////////////////\n\n  /**\n   * Retrieve an option by key.\n   * @param key\n   * @returns option value\n   */\n  option: function option(key) {\n    return this.options[key];\n  },\n\n  /**\n   * Allows retrieval of the store generator by name. This is used internally by ReactOnRails after\n   * a rails form loads to prepare stores.\n   * @param name\n   * @returns Redux Store generator function\n   */\n  getStoreGenerator: function getStoreGenerator(name) {\n    return _StoreRegistry[\"default\"].getStoreGenerator(name);\n  },\n\n  /**\n   * Allows saving the store populated by Rails form props. Used internally by ReactOnRails.\n   * @param name\n   * @returns Redux Store, possibly hydrated\n   */\n  setStore: function setStore(name, store) {\n    return _StoreRegistry[\"default\"].setStore(name, store);\n  },\n\n  /**\n   * Clears hydratedStores to avoid accidental usage of wrong store hydrated in previous/parallel\n   * request.\n   */\n  clearHydratedStores: function clearHydratedStores() {\n    _StoreRegistry[\"default\"].clearHydratedStores();\n  },\n\n  /**\n   * ReactOnRails.render(\"HelloWorldApp\", {name: \"Stranger\"}, 'app');\n   *\n   * Does this:\n   *   ReactDOM.render(React.createElement(HelloWorldApp, {name: \"Stranger\"}),\n   *     document.getElementById('app'))\n   *\n   * @param name Name of your registered component\n   * @param props Props to pass to your component\n   * @param domNodeId\n   * @param hydrate Pass truthy to update server rendered html. Default is falsy\n   * @returns {virtualDomElement} Reference to your component's backing instance\n   */\n  render: function render(name, props, domNodeId, hydrate) {\n    var componentObj = _ComponentRegistry[\"default\"].get(name);\n\n    var reactElement = (0, _createReactElement[\"default\"])({\n      componentObj: componentObj,\n      props: props,\n      domNodeId: domNodeId\n    });\n    var render = hydrate ? _reactDom[\"default\"].hydrate : _reactDom[\"default\"].render; // eslint-disable-next-line react/no-render-return-value\n\n    return render(reactElement, document.getElementById(domNodeId));\n  },\n\n  /**\n   * Get the component that you registered\n   * @param name\n   * @returns {name, component, generatorFunction, isRenderer}\n   */\n  getComponent: function getComponent(name) {\n    return _ComponentRegistry[\"default\"].get(name);\n  },\n\n  /**\n   * Used by server rendering by Rails\n   * @param options\n   */\n  serverRenderReactComponent: function serverRenderReactComponent(options) {\n    return (0, _serverRenderReactComponent2[\"default\"])(options);\n  },\n\n  /**\n   * Used by Rails to catch errors in rendering\n   * @param options\n   */\n  handleError: function handleError(options) {\n    return (0, _handleError2[\"default\"])(options);\n  },\n\n  /**\n   * Used by Rails server rendering to replay console messages.\n   */\n  buildConsoleReplay: function buildConsoleReplay() {\n    return (0, _buildConsoleReplay2[\"default\"])();\n  },\n\n  /**\n   * Get an Object containing all registered components. Useful for debugging.\n   * @returns {*}\n   */\n  registeredComponents: function registeredComponents() {\n    return _ComponentRegistry[\"default\"].components();\n  },\n\n  /**\n   * Get an Object containing all registered store generators. Useful for debugging.\n   * @returns {*}\n   */\n  storeGenerators: function storeGenerators() {\n    return _StoreRegistry[\"default\"].storeGenerators();\n  },\n\n  /**\n   * Get an Object containing all hydrated stores. Useful for debugging.\n   * @returns {*}\n   */\n  stores: function stores() {\n    return _StoreRegistry[\"default\"].stores();\n  },\n  resetOptions: function resetOptions() {\n    this.options = (0, _assign[\"default\"])({}, DEFAULT_OPTIONS);\n  }\n};\nctx.ReactOnRails.resetOptions();\nClientStartup.clientStartup(ctx);\nvar _default = ctx.ReactOnRails;\nexports[\"default\"] = _default;","map":null,"metadata":{},"sourceType":"module"}