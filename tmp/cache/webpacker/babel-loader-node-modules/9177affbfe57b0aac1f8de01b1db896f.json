{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs2/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _from = _interopRequireDefault(require(\"@babel/runtime-corejs2/core-js/array/from\"));\n\nvar _keys = _interopRequireDefault(require(\"@babel/runtime-corejs2/core-js/object/keys\"));\n\nvar _map = _interopRequireDefault(require(\"@babel/runtime-corejs2/core-js/map\"));\n\nvar _generatorFunction = _interopRequireDefault(require(\"./generatorFunction\")); // key = name used by react_on_rails\n// value = { name, component, generatorFunction: boolean, isRenderer: boolean }\n\n\nvar registeredComponents = new _map[\"default\"]();\nvar _default = {\n  /**\n   * @param components { component1: component1, component2: component2, etc. }\n   */\n  register: function register(components) {\n    (0, _keys[\"default\"])(components).forEach(function (name) {\n      if (registeredComponents.has(name)) {\n        console.warn('Called register for component that is already registered', name);\n      }\n\n      var component = components[name];\n\n      if (!component) {\n        throw new Error(\"Called register with null component named \".concat(name));\n      }\n\n      var isGeneratorFunction = (0, _generatorFunction[\"default\"])(component);\n      var isRenderer = isGeneratorFunction && component.length === 3;\n      registeredComponents.set(name, {\n        name: name,\n        component: component,\n        generatorFunction: isGeneratorFunction,\n        isRenderer: isRenderer\n      });\n    });\n  },\n\n  /**\n   * @param name\n   * @returns { name, component, generatorFunction }\n   */\n  get: function get(name) {\n    if (registeredComponents.has(name)) {\n      return registeredComponents.get(name);\n    }\n\n    var keys = (0, _from[\"default\"])(registeredComponents.keys()).join(', ');\n    throw new Error(\"Could not find component registered with name \".concat(name, \". Registered component names include [ \").concat(keys, \" ]. Maybe you forgot to register the component?\"));\n  },\n\n  /**\n   * Get a Map containing all registered components. Useful for debugging.\n   * @returns Map where key is the component name and values are the\n   * { name, component, generatorFunction}\n   */\n  components: function components() {\n    return registeredComponents;\n  }\n};\nexports[\"default\"] = _default;","map":null,"metadata":{},"sourceType":"module"}